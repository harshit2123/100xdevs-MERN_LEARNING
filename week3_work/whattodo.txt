1. learnt about how to build the todoServer
2. Learing about how to store your data in files, otherwise , it will be lost somewhere
   Can make any file (todos.json or todos.txt) to read the data from the file
3. here , what is JSON.Parse in "   res.json(JSON.parse(data)); "

// this is when you read from the file

  whenever you read from a file you do it in the form of text format, everything is kinda like treated as a string,
  if for an empty array, it will be like 
   var a = "[]", so to make sure to return a JSON we need to parse it,
   as you know, you can return a string, JSON, and HTML

// when you writye from the file  - have to stringify it
 fs.writeFile("todos.json", JSON.stringify(todos),(err)=>{
    if(err) throw err;
    res.status(201).json(newTodo);
 })


 4. Client side javascript is written inside the script tag
 - resp.json means calling the json
 - ideally the fetch promise is called onLoad not on onPress

 5. the fs library is not a clean one
       function parsedResponse(data){
             console.log(data);
        }

        function callback(){
               resp.json().then(parsedResponse)    
        }
        fetch("http://localhost:3000/todos",{
            method:"GET"
        }).then(callback)


6. Learnt About CORS errors   - to prevent our backend to receive requests form the unmentioned sourse
    for the Cors eror to remove
  Method1-  send that file also where you want the respose
    app.get("/", (req, res) => {
    res.sendFile(this.path.join(__dirname, "index.html"));
    });     

  Method 2 - Available your backend for any requests
    npm install Cors
    const cors = require("cors")

7. everytime when you are sending a post request to the server, to ensure it it is a JSON
u send some info in header
            headers: {
                    "Content-Type": "application/json"
                     }    

8. Right now our main target is to get data from the dom and send it to backend
9 . You extract things from dom by , var title = document.getElementById("title").value;


10.   
      function todosCallback(data) {
        console.log(data);
        var parentElement = document.getElementById("mainArea");
        parentElement.innerHTML = JSON.stringify(data);
      }
      function callback2(response) {
        response.json().then(todosCallback);
      }
      function getData() {
        fetch("http://localhost:3000/todos", {
          method: "GET",
        }).then(callback2);
      }
      getData();

      Code to get the data from the dom which i saved and then adding it to the main mainArea
      it will look like this 
      [{"id":425093,"title":"gym","description":"have to go to gym man from 5-6!"},{"id":57656,"title":"cdcdcd","description":"cdcdcdcd"},{"id":664015,"title":"yo",
      "description":"cddcd"},{"id":715241,"title":"yo","description":"cddcd"}]

11 now the questions is how can you can make this custom dom objet to show this data 

12. now the way to create the custom html dom is 

     var parentElement = document.getElementById("mainArea");
        for (var i = 0; i < data.length; i++) {
          var childElement = document.createElement("div");

          var grandChildElement1 = document.createElement("span");
          grandChildElement1.innerHTML = data[i].title;

          var grandChildElement2 = document.createElement("span");
          grandChildElement2.innerHTML = data[i].description;

          var grandChildElement3 = document.createElement("button");
          grandChildElement3.innerHTML = "DELETE";

          childElement.appendChild(grandChildElement1);
          childElement.appendChild(grandChildElement2);
          childElement.appendChild(grandChildElement3);
          
          parentElement.appendChild(childElement);
        }

        "      var grandChildElement1 = document.createElement("span");" this lines creates it,,,,
                and this line" grandChildElement1.innerHTML" fits the data in the HTML


                we can create more child inside of child and so on....
    that's how you can create the custom DOM, the above is called dom manupilation for a long time , untill the react vieew came.....
    but here one problem i sthat , when i send  the data it does update in backend , but it doesnt updat eon frontend
    everytime we nhave to refresh it.....
    



13.   To insert the html automatically according to the incoming data.

      var a = document.createElement("div")
      undefined

     a // when you log a , then you get this , but this is not inserted in the HTML, You can create thousands of more , but it wont be inserted in the real html
     <div><div>
     ---Now to insert it into the real html body , you need to do...
     document.getElementById("mainArea").appendChild(a)

     so we use the above concept in this manner ---
      for (var i = 0; i < data.length; i++) {
          var childElement = document.createElement("div");
          childElement.innerHTML = data[i].title;
          parentElement.appendChild(childElement);
        }
     // To fill the values automatically with javascript into the html , without human creating it
     --- Now we also need to structure it...like 
     <div> ---1
          <span>go to gym</span>
          <span> I need to hit the gym </span>
          <button> delete </button>
     </div>   
     --- Now to do this we need to give 1 step deeper...like the 1 part is the child then we need to cretae a grand child for it 
     ex. ->
     
     for (var i = 0; i < data.length; i++) {
          var childElement = document.createElement("div");


          var grandChildElement1 = document.createElement("span");
          grandChildElement1.innerHTML = data[i].title

          var grandChildElement2 = document.createElement("span");
          grandChildElement1.innerHTML = data[i].description

          var grandChildElement3 = document.createElement("button");
          grandChildElement1.innerHTML = "Delete"
          grandChildElement3.setAttribute("oneclick",)

         childElement.appendChild(grandChildElement1)
         childElement.appendChild(grandChildElement2)
         childElement.appendChild(grandChildElement3)

        parentElement.appendChild(childElement);
        }


14. Now How would you add functioning in the structure like grandchild and all...
     -- var grandChildElement4 = document.createElement("button")
        grandChildElement4
        <button></button>
     -- var grandChildElement3 = document.createElement("button");
          grandChildElement3.innerHTML = "Delete";
          grandChildElement3.setAttribute(
            "onclick",
            "deleteTodo(" + data[i].id + ")"
          );



15. For removing any div --
    function deleteDone(id) {
        console.log("delete Done");
        var element = document.getElementById(id);
        if (element) {
          element.parentNode.removeChild(element);
        } else {
          console.log("Nothing to delete");
        }
      }
        